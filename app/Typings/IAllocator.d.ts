/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAllocatorInterface extends ethers.utils.Interface {
  functions: {
    "activate()": FunctionFragment;
    "addId(uint256)": FunctionFragment;
    "amountAllocated(uint256)": FunctionFragment;
    "deactivate(bool)": FunctionFragment;
    "deallocate(uint256[])": FunctionFragment;
    "ids()": FunctionFragment;
    "migrate()": FunctionFragment;
    "name()": FunctionFragment;
    "prepareMigration()": FunctionFragment;
    "rewardTokens()": FunctionFragment;
    "status()": FunctionFragment;
    "tokenIds(uint256)": FunctionFragment;
    "tokens()": FunctionFragment;
    "update(uint256)": FunctionFragment;
    "utilityTokens()": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "activate", values?: undefined): string;
  encodeFunctionData(functionFragment: "addId", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "amountAllocated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deactivate", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "deallocate",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "ids", values?: undefined): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepareMigration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "utilityTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "amountAllocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deactivate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deallocate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "utilityTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AllocatorActivated()": EventFragment;
    "AllocatorDeactivated(bool)": EventFragment;
    "AllocatorDeployed(address,address)": EventFragment;
    "EtherReceived(uint256)": EventFragment;
    "LossLimitViolated(uint128,uint128,uint256)": EventFragment;
    "MigrationExecuted(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllocatorActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocatorDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocatorDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EtherReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LossLimitViolated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationExecuted"): EventFragment;
}

export type AllocatorActivatedEvent = TypedEvent<[] & {}>;

export type AllocatorDeactivatedEvent = TypedEvent<
  [boolean] & { panic: boolean }
>;

export type AllocatorDeployedEvent = TypedEvent<
  [string, string] & { authority: string; extender: string }
>;

export type EtherReceivedEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type LossLimitViolatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    lastLoss: BigNumber;
    dloss: BigNumber;
    estimatedTotalAllocated: BigNumber;
  }
>;

export type MigrationExecutedEvent = TypedEvent<
  [string] & { allocator: string }
>;

export class IAllocator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAllocatorInterface;

  functions: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    amountAllocated(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deactivate(
      panic: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deallocate(
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ids(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    prepareMigration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardTokens(overrides?: CallOverrides): Promise<[string[]]>;

    status(overrides?: CallOverrides): Promise<[number]>;

    tokenIds(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokens(overrides?: CallOverrides): Promise<[string[]]>;

    update(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    utilityTokens(overrides?: CallOverrides): Promise<[string[]]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  activate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addId(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  amountAllocated(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deactivate(
    panic: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deallocate(
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ids(overrides?: CallOverrides): Promise<BigNumber[]>;

  migrate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  prepareMigration(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardTokens(overrides?: CallOverrides): Promise<string[]>;

  status(overrides?: CallOverrides): Promise<number>;

  tokenIds(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  tokens(overrides?: CallOverrides): Promise<string[]>;

  update(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  utilityTokens(overrides?: CallOverrides): Promise<string[]>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    activate(overrides?: CallOverrides): Promise<void>;

    addId(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    amountAllocated(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deactivate(panic: boolean, overrides?: CallOverrides): Promise<void>;

    deallocate(
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    ids(overrides?: CallOverrides): Promise<BigNumber[]>;

    migrate(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    prepareMigration(overrides?: CallOverrides): Promise<void>;

    rewardTokens(overrides?: CallOverrides): Promise<string[]>;

    status(overrides?: CallOverrides): Promise<number>;

    tokenIds(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokens(overrides?: CallOverrides): Promise<string[]>;

    update(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    utilityTokens(overrides?: CallOverrides): Promise<string[]>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AllocatorActivated()"(): TypedEventFilter<[], {}>;

    AllocatorActivated(): TypedEventFilter<[], {}>;

    "AllocatorDeactivated(bool)"(
      panic?: null
    ): TypedEventFilter<[boolean], { panic: boolean }>;

    AllocatorDeactivated(
      panic?: null
    ): TypedEventFilter<[boolean], { panic: boolean }>;

    "AllocatorDeployed(address,address)"(
      authority?: null,
      extender?: null
    ): TypedEventFilter<
      [string, string],
      { authority: string; extender: string }
    >;

    AllocatorDeployed(
      authority?: null,
      extender?: null
    ): TypedEventFilter<
      [string, string],
      { authority: string; extender: string }
    >;

    "EtherReceived(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    EtherReceived(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "LossLimitViolated(uint128,uint128,uint256)"(
      lastLoss?: null,
      dloss?: null,
      estimatedTotalAllocated?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        lastLoss: BigNumber;
        dloss: BigNumber;
        estimatedTotalAllocated: BigNumber;
      }
    >;

    LossLimitViolated(
      lastLoss?: null,
      dloss?: null,
      estimatedTotalAllocated?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        lastLoss: BigNumber;
        dloss: BigNumber;
        estimatedTotalAllocated: BigNumber;
      }
    >;

    "MigrationExecuted(address)"(
      allocator?: null
    ): TypedEventFilter<[string], { allocator: string }>;

    MigrationExecuted(
      allocator?: null
    ): TypedEventFilter<[string], { allocator: string }>;
  };

  estimateGas: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    amountAllocated(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deactivate(
      panic: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deallocate(
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ids(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    prepareMigration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIds(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokens(overrides?: CallOverrides): Promise<BigNumber>;

    update(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    utilityTokens(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    amountAllocated(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deactivate(
      panic: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deallocate(
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ids(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepareMigration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIds(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    update(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    utilityTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
