/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IYieldStreamerInterface extends ethers.utils.Interface {
  functions: {
    "addToDeposit(uint256,uint256)": FunctionFragment;
    "deposit(uint256,address,uint128,uint128)": FunctionFragment;
    "getPrincipalInGOHM(uint256)": FunctionFragment;
    "getRecipientIds(address)": FunctionFragment;
    "harvestStreamTokens(uint256)": FunctionFragment;
    "updatePaymentInterval(uint256,uint128)": FunctionFragment;
    "updateUserMinThreshold(uint256,uint128)": FunctionFragment;
    "upkeep()": FunctionFragment;
    "upkeepEligibility()": FunctionFragment;
    "withdrawAllYield()": FunctionFragment;
    "withdrawPrincipal(uint256,uint256)": FunctionFragment;
    "withdrawYield(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addToDeposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrincipalInGOHM",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipientIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestStreamTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaymentInterval",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserMinThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upkeep", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upkeepEligibility",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPrincipal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawYield",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrincipalInGOHM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestStreamTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePaymentInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserMinThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upkeep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upkeepEligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawYield",
    data: BytesLike
  ): Result;

  events: {};
}

export class IYieldStreamer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IYieldStreamerInterface;

  functions: {
    addToDeposit(
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount_: BigNumberish,
      recipient_: string,
      paymentInterval_: BigNumberish,
      userMinimumDaiThreshold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPrincipalInGOHM(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRecipientIds(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    harvestStreamTokens(
      id_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePaymentInterval(
      id_: BigNumberish,
      paymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUserMinThreshold(
      id_: BigNumberish,
      threshold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upkeep(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upkeepEligibility(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        numberOfDepositsEligible: BigNumber;
        amountOfYieldToSwap: BigNumber;
      }
    >;

    withdrawAllYield(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPrincipal(
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawYield(
      id_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addToDeposit(
    id_: BigNumberish,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount_: BigNumberish,
    recipient_: string,
    paymentInterval_: BigNumberish,
    userMinimumDaiThreshold_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPrincipalInGOHM(
    id_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRecipientIds(
    recipient_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  harvestStreamTokens(
    id_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePaymentInterval(
    id_: BigNumberish,
    paymentInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUserMinThreshold(
    id_: BigNumberish,
    threshold_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upkeep(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upkeepEligibility(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      numberOfDepositsEligible: BigNumber;
      amountOfYieldToSwap: BigNumber;
    }
  >;

  withdrawAllYield(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPrincipal(
    id_: BigNumberish,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawYield(
    id_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToDeposit(
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      amount_: BigNumberish,
      recipient_: string,
      paymentInterval_: BigNumberish,
      userMinimumDaiThreshold_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPrincipalInGOHM(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecipientIds(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    harvestStreamTokens(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePaymentInterval(
      id_: BigNumberish,
      paymentInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUserMinThreshold(
      id_: BigNumberish,
      threshold_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upkeep(overrides?: CallOverrides): Promise<void>;

    upkeepEligibility(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        numberOfDepositsEligible: BigNumber;
        amountOfYieldToSwap: BigNumber;
      }
    >;

    withdrawAllYield(overrides?: CallOverrides): Promise<void>;

    withdrawPrincipal(
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawYield(id_: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addToDeposit(
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      amount_: BigNumberish,
      recipient_: string,
      paymentInterval_: BigNumberish,
      userMinimumDaiThreshold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPrincipalInGOHM(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecipientIds(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestStreamTokens(
      id_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePaymentInterval(
      id_: BigNumberish,
      paymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUserMinThreshold(
      id_: BigNumberish,
      threshold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upkeep(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upkeepEligibility(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAllYield(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPrincipal(
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawYield(
      id_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToDeposit(
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount_: BigNumberish,
      recipient_: string,
      paymentInterval_: BigNumberish,
      userMinimumDaiThreshold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPrincipalInGOHM(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecipientIds(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestStreamTokens(
      id_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePaymentInterval(
      id_: BigNumberish,
      paymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUserMinThreshold(
      id_: BigNumberish,
      threshold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upkeep(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upkeepEligibility(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAllYield(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPrincipal(
      id_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawYield(
      id_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
